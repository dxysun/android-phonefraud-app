package com.dxy.phonefraud.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRAUD_SMS".
*/
public class FraudSmsDao extends AbstractDao<FraudSms, Long> {

    public static final String TABLENAME = "FRAUD_SMS";

    /**
     * Properties of entity FraudSms.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Smsnumber = new Property(1, String.class, "smsnumber", false, "SMSNUMBER");
        public final static Property Smscontent = new Property(2, String.class, "smscontent", false, "SMSCONTENT");
        public final static Property Smstime = new Property(3, String.class, "smstime", false, "SMSTIME");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Smsname = new Property(5, String.class, "smsname", false, "SMSNAME");
    }


    public FraudSmsDao(DaoConfig config) {
        super(config);
    }
    
    public FraudSmsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRAUD_SMS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SMSNUMBER\" TEXT," + // 1: smsnumber
                "\"SMSCONTENT\" TEXT," + // 2: smscontent
                "\"SMSTIME\" TEXT," + // 3: smstime
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"SMSNAME\" TEXT);"); // 5: smsname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRAUD_SMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FraudSms entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String smsnumber = entity.getSmsnumber();
        if (smsnumber != null) {
            stmt.bindString(2, smsnumber);
        }
 
        String smscontent = entity.getSmscontent();
        if (smscontent != null) {
            stmt.bindString(3, smscontent);
        }
 
        String smstime = entity.getSmstime();
        if (smstime != null) {
            stmt.bindString(4, smstime);
        }
        stmt.bindLong(5, entity.getType());
 
        String smsname = entity.getSmsname();
        if (smsname != null) {
            stmt.bindString(6, smsname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FraudSms entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String smsnumber = entity.getSmsnumber();
        if (smsnumber != null) {
            stmt.bindString(2, smsnumber);
        }
 
        String smscontent = entity.getSmscontent();
        if (smscontent != null) {
            stmt.bindString(3, smscontent);
        }
 
        String smstime = entity.getSmstime();
        if (smstime != null) {
            stmt.bindString(4, smstime);
        }
        stmt.bindLong(5, entity.getType());
 
        String smsname = entity.getSmsname();
        if (smsname != null) {
            stmt.bindString(6, smsname);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FraudSms readEntity(Cursor cursor, int offset) {
        FraudSms entity = new FraudSms( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // smsnumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // smscontent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // smstime
            cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // smsname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FraudSms entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSmsnumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSmscontent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSmstime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setSmsname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FraudSms entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FraudSms entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FraudSms entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
