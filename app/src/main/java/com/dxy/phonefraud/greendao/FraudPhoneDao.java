package com.dxy.phonefraud.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRAUD_PHONE".
*/
public class FraudPhoneDao extends AbstractDao<FraudPhone, Long> {

    public static final String TABLENAME = "FRAUD_PHONE";

    /**
     * Properties of entity FraudPhone.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phonenumber = new Property(1, String.class, "phonenumber", false, "PHONENUMBER");
        public final static Property Calltime = new Property(2, String.class, "calltime", false, "CALLTIME");
        public final static Property Phonename = new Property(3, String.class, "phonename", false, "PHONENAME");
        public final static Property Recordpath = new Property(4, String.class, "recordpath", false, "RECORDPATH");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Isrecord = new Property(6, int.class, "isrecord", false, "ISRECORD");
    }


    public FraudPhoneDao(DaoConfig config) {
        super(config);
    }
    
    public FraudPhoneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRAUD_PHONE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PHONENUMBER\" TEXT," + // 1: phonenumber
                "\"CALLTIME\" TEXT," + // 2: calltime
                "\"PHONENAME\" TEXT," + // 3: phonename
                "\"RECORDPATH\" TEXT," + // 4: recordpath
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"ISRECORD\" INTEGER NOT NULL );"); // 6: isrecord
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRAUD_PHONE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FraudPhone entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(2, phonenumber);
        }
 
        String calltime = entity.getCalltime();
        if (calltime != null) {
            stmt.bindString(3, calltime);
        }
 
        String phonename = entity.getPhonename();
        if (phonename != null) {
            stmt.bindString(4, phonename);
        }
 
        String recordpath = entity.getRecordpath();
        if (recordpath != null) {
            stmt.bindString(5, recordpath);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getIsrecord());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FraudPhone entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(2, phonenumber);
        }
 
        String calltime = entity.getCalltime();
        if (calltime != null) {
            stmt.bindString(3, calltime);
        }
 
        String phonename = entity.getPhonename();
        if (phonename != null) {
            stmt.bindString(4, phonename);
        }
 
        String recordpath = entity.getRecordpath();
        if (recordpath != null) {
            stmt.bindString(5, recordpath);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getIsrecord());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FraudPhone readEntity(Cursor cursor, int offset) {
        FraudPhone entity = new FraudPhone( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phonenumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // calltime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phonename
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // recordpath
            cursor.getInt(offset + 5), // type
            cursor.getInt(offset + 6) // isrecord
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FraudPhone entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhonenumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCalltime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhonename(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecordpath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setIsrecord(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FraudPhone entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FraudPhone entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FraudPhone entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
